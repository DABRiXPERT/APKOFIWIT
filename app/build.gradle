plugins {
    id 'com.android.application'
}
//--------------------------------------------------------------------------------------------------GENERATE-VERSION
//   before rc:(rebuild time).00(stat_1dgt/2dgts).(build_bfc)
//   after  rc:(rebuild time).(ver_2dgts)(idle_1dgt).(build_afc)
//   code     :(ROCyear_3dgts)(week_in_year_2dgts)(weekname_1dgt)(attempt_3dgts)(verificate_num_1dgt)
//
//   stat:
//   00-09: pre-alpha
//   10-49: alpha
//   50-80: beta (80 can be both beta and rc)
//   80-99: rc
//   OPTIONAL:  last (1 - 3) digit can be deleted if 0
//
//   EXAMPLE:
//   2077-3-25 16:00:00(UTC) , rb = 0, ver = 7, stat = beta(5), att# = 144
//   bfc:  0.005(0).573251600
//   afc:  0.075(0).77134
//   code: 1661341441
//   build number is auto-generated by version-generate.gradle
def rebuild = 0
def ver = 0
def stat = 670
def dev = true
def clear_zero = true
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
//--------------------------------------------------------------------------------------------------NAME
    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"))
    def formatYear = cal.get(Calendar.YEAR)
    def formatMonth = cal.get(Calendar.MONTH) + 1
    def formatWeekNum = cal.get(Calendar.WEEK_OF_YEAR)
    def formatWeek = cal.get(Calendar.DAY_OF_WEEK) - 1
    def formatDay = cal.get(Calendar.DAY_OF_MONTH)
    def formatHour = cal.get(Calendar.HOUR_OF_DAY)
    def formatMinute = cal.get(Calendar.MINUTE)

    def g_versionName = ""
    def pY, pM, dd, HH, mm
    def YY,WW,w
    if(dev){ // BEFORE RC
        pY = formatYear - 2020
        if (formatMonth == 10)
            pM = "0"
        else if (formatMonth == 11)
            pM = "A"
        else if (formatMonth == 12)
            pM = "B"
        else
            pM = Integer.toString(formatMonth)
        dd = formatDay
        HH = formatHour
        mm = formatMinute
        if(clear_zero && stat % 10 == 0)
            stat = (int)(stat / 10)
        g_versionName = String.format("%d.%02d%d.%d%s%02d%02d%02d", rebuild, ver, (int)stat, pY, pM, dd, HH, mm)
    }
    else { // AFTER RC
        YY = formatYear % 100
        WW = formatWeekNum
        w = formatWeek
        if(formatMonth == 11 && formatDay >= 26 && WW == 1){
            cal.add(Calendar.DAY_OF_MONTH, -7)
            WW = cal.get(Calendar.WEEK_OF_YEAR) + 1
            cal.add(Calendar.DAY_OF_MONTH, -7)
        }
        if(clear_zero && stat % 10 == 0)
            stat = (int)(stat / 10)
        g_versionName = String.format("%d.%02d%d.%d%02d%d", rebuild, ver, stat, YY, WW, w)
    }
//--------------------------------------------------------------------------------------------------CODE
    def g_versionCode
    def ROCy, cp, vnum, div
    def sum = 0
    def base = []
    def amp = []
    ROCy = formatYear - 1911
//--------------------------------------------------------------------------------------------------ATTEMPT COUNTER
    File file = new File("buildnum.txt")
    if (!file.exists())
    {
        file.createNewFile()
        FileWriter fileWriter = new FileWriter("buildnum.txt")
        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)
        bufferedWriter.write("0")
        bufferedWriter.flush()
        bufferedWriter.close()
    }
    else
    {
        def build
        BufferedReader bufferedReader = new BufferedReader(new FileReader("buildnum.txt"))
        build = Integer.parseInt(bufferedReader.readLine())
        build++
        bufferedReader.close()
        FileWriter fileWriter = new FileWriter("buildnum.txt")
        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)
        bufferedWriter.write(String.valueOf(build))
        bufferedWriter.flush()
        bufferedWriter.close()
    }
    BufferedReader bufferedReader = new BufferedReader(new FileReader("buildnum.txt"))
    def str = bufferedReader.readLine()
    cp = str.toInteger()
//--------------------------------------------------------------------------------------------------END OF ATT COUNTER

    if(formatMonth == 12 && formatDay >= 26 && formatWeekNum == 1){
        cal.add(Calendar.DAY_OF_MONTH, -7)
        formatWeekNum = cal.get(Calendar.WEEK_OF_YEAR) + 1
        cal.add(Calendar.DAY_OF_MONTH, -7)
    }

    base[0] = (int)(ROCy/100)
    base[1] = (int)((ROCy-base[0]*100)/10)
    base[2] = (int)(ROCy%10)
    base[3] = (int)(formatWeekNum/10)
    base[4] = (int)(formatWeekNum%10)
    base[5] = (int)(formatWeek)
    base[6] = (int)(cp/100)
    base[7] = (int)((cp-base[6]*100)/10)
    base[8] = (int)(cp%10)

    amp[0] = (int)((formatYear%100)/10)
    amp[1] = (int)((formatYear%100)%10)
    amp[2] = (int)((formatMonth+1)/10)
    amp[3] = (int)((formatMonth+1)%10)
    amp[4] = (int)(formatDay/10)
    amp[5] = (int)(formatDay%10)
    div = (int)(((formatHour*100+formatMinute)*cp)%1000)
    amp[6] = (int)(div/100)
    amp[7] = (int)((div-amp[6]*100)/10)
    amp[8] = (int)(div-amp[6]*100-amp[7]*10)

    for (int i = 0; i <= 8; i++)
    {
        sum += base[i] * amp[i] * (i+1)
    }

    vnum = (int)(sum % 10)
    g_versionCode = Integer.valueOf(String.format("%03d%02d%d%03d%d", ROCy, formatWeekNum, formatWeek, cp, vnum))
//--------------------------------------------------------------------------------------------------CONFIG
    defaultConfig {
        applicationId "com.buriku.nayoni.apkofiwit"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode g_versionCode
        versionName g_versionName

        resValue "string", "indev", Boolean.toString(dev)//return indev or not
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}